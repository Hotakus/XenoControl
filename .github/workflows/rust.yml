name: Tauri Cross-Platform Build and Release

on:
  push:
    tags: ["v*"]   # 匹配 v 开头的标签，如 v0.1.8
  workflow_dispatch: # 手动触发支持

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write

    steps:
      # 步骤 1: 检出代码（包含完整历史）
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史（changelog 生成需要）

      # 步骤 2: 安装 Rust
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src, clippy

      # 步骤 3: 安装 Tauri CLI
      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      # 步骤 4: 安装 Linux 依赖 (修复 libudev 缺失问题)
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libudev-dev \        # 修复 libudev 缺失问题
            libdbus-1-dev \      # 常见 Tauri 依赖
            pkg-config          # 确保 pkg-config 可用

      # 步骤 5: 检查 Windows WebView2
      - name: Check Windows Dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $regPath = "HKLM:\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}"
          if (-not (Test-Path $regPath)) {
            Write-Host "WebView2 not found, installing..."
            $installerPath = "$env:TEMP\MicrosoftEdgeWebview2Setup.exe"
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $installerPath
            Start-Process -FilePath $installerPath -ArgumentList "/silent /install" -Wait
          } else {
            Write-Host "WebView2 is already installed"
          }

      # 步骤 6: 设置 pkg-config 环境 (仅 Linux)
      - name: Setup pkg-config (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV

      # 步骤 7: 缓存 Cargo 依赖
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # ✅ 步骤 8: 设置版本号
      - name: Set Application Version
        shell: bash
        run: |
          BASE_VERSION=$(grep -oP '"version":\s*"\K[^"]+' tauri.conf.json)

          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="${BASE_VERSION}+manual.${{ github.run_id }}"
          fi

          echo "📦 Final version: $VERSION"

          # 替换 tauri.conf.json
          sed -i.bak -E "s/\"version\": *\"[^\"]+\"/\"version\": \"$VERSION\"/" tauri.conf.json && rm tauri.conf.json.bak

          # 替换 Cargo.toml
          sed -i.bak -E "s/^version = \"[^\"]+\"/version = \"$VERSION\"/" Cargo.toml && rm Cargo.toml.bak

          # 输出验证
          echo "Updated tauri.conf.json version:"
          grep '"version":' tauri.conf.json
          echo "Updated Cargo.toml version:"
          grep '^version =' Cargo.toml

      # 步骤 9: 构建 Tauri 应用
      - name: Build Tauri Application
        run: cargo tauri build --verbose

      # 步骤 10: 上传构建产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ github.ref_name || 'manual' }}
          path: |
            target/release/bundle/**
            target/**/*.msi
            target/**/*.AppImage
            target/**/*.deb
          retention-days: 7
          if-no-files-found: error

      # 步骤 11: 显示构建产物信息
      - name: Show Build Results
        run: |
          echo "Build artifacts:"
          ls -R target/release/bundle || true
          echo "Uploaded artifacts:"
          ls -R ${{ github.workspace }} || true

  # Release 发布任务
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]  # 依赖所有构建任务
    if: startsWith(github.ref, 'refs/tags/')  # 仅在标签推送时执行
    permissions:
      contents: write  # 需要权限创建 Release

    steps:
      # 步骤 1: 下载所有构建产物
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 步骤 2: 自动生成 changelog
      - name: Generate Changelog
        uses: TriPSs/conventional-changelog-action@v3
        id: changelog
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: "CHANGELOG.md"

      # 步骤 3: 预览 changelog（调试用）
      - name: Preview Changelog
        run: |
          echo "Generated Changelog:"
          cat CHANGELOG.md

      # 步骤 4: 判断是否为预发布版本
      - name: Check Prerelease Status
        id: check-prerelease
        run: |
          if [[ "${{ github.ref_name }}" =~ -[a-zA-Z0-9] ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤 5: 创建 GitHub Release
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ fromJson(steps.check-prerelease.outputs.prerelease) }}
          files: |
            artifacts/**/*
          draft: false
          generate_release_notes: false

      # 步骤 6: 显示发布结果
      - name: Show Release URL
        run: echo "Release created at ${{ steps.create-release.outputs.url }}"