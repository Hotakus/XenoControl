name: Tauri Cross-Platform Build (Fixed)

on:
  push:
    tags: ["v*"]   # 匹配 v 开头的标签，如 v0.1.8
  workflow_dispatch: # 手动触发支持

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write

    steps:
      # 步骤 1: 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤 2: 安装 Rust
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src, clippy

      # 步骤 3: 安装 Tauri CLI
      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      # 步骤 4: 安装 Linux 依赖
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      # 步骤 5: 检查 Windows WebView2
      - name: Check Windows Dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $regPath = "HKLM:\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}"
          if (-not (Test-Path $regPath)) {
            Write-Host "WebView2 not found, installing..."
            $installerPath = "$env:TEMP\MicrosoftEdgeWebview2Setup.exe"
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $installerPath
            Start-Process -FilePath $installerPath -ArgumentList "/silent /install" -Wait
          } else {
            Write-Host "WebView2 is already installed"
          }

      # 步骤 6: 缓存 Cargo 依赖
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # ✅ 步骤 7: 设置版本号（同步 tauri.conf.json 和 Cargo.toml）
      - name: Set Application Version
        shell: bash
        run: |
          BASE_VERSION=$(grep -oP '"version":\s*"\K[^"]+' tauri.conf.json)

          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="${BASE_VERSION}+manual.${{ github.run_id }}"
          fi

          echo "📦 Final version: $VERSION"

          # 替换 tauri.conf.json
          sed -i.bak -E "s/\"version\": *\"[^\"]+\"/\"version\": \"$VERSION\"/" tauri.conf.json && rm tauri.conf.json.bak

          # 替换 Cargo.toml
          sed -i.bak -E "s/^version = \"[^\"]+\"/version = \"$VERSION\"/" Cargo.toml && rm Cargo.toml.bak

          # 输出验证
          echo "Updated tauri.conf.json version:"
          grep '"version":' tauri.conf.json
          echo "Updated Cargo.toml version:"
          grep '^version =' Cargo.toml

      # 步骤 8: 构建 Tauri 应用
      - name: Build Tauri Application
        run: cargo tauri build --verbose

      # 步骤 9: 上传构建产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ github.ref_name || 'manual' }}
          path: |
            target/release/bundle/**
            target/**/*.msi
            target/**/*.AppImage
          retention-days: 7
          if-no-files-found: error

      # 步骤 10: 显示构建产物信息
      - name: Show Build Results
        run: |
          echo "Build artifacts:"
          ls -R target/release/bundle || true
          echo "Uploaded artifacts:"
          ls -R ${{ github.workspace }} || true
