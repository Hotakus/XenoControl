name: Tauri Cross-Platform Build (Fixed)

on:
  push:
    tags: ["v*"]   # 匹配所有 v 开头的标签
  workflow_dispatch: # 支持手动触发

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write

    steps:
      # 步骤 1: 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤 2: 修复的 Rust 安装 - 使用正确的 Action 名称
      - name: Install Rust
        # 使用正确的 rust-lang 官方 Action
        uses: rust-lang/setup-rust@v1
        with:
          toolchain: stable
          components: rust-src, clippy
          # 可选：设置国内镜像加速（中国大陆用户）
          # registry-mirror: https://rsproxy.cn
          # cache: cargo

      # 步骤 3: 安装 Tauri CLI
      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      # 步骤 4: Linux 依赖安装
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      # 步骤 5: Windows 依赖检查（确保 WebView2 存在）
      - name: Check Windows Dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          # 检查 WebView2 是否安装
          $regPath = "HKLM:\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}"
          if (-not (Test-Path $regPath)) {
            Write-Host "WebView2 not found, installing..."
            # 下载并安装 WebView2
            $installerPath = "$env:TEMP\MicrosoftEdgeWebview2Setup.exe"
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $installerPath
            Start-Process -FilePath $installerPath -ArgumentList "/silent /install" -Wait
          } else {
            Write-Host "WebView2 is already installed"
          }

      # 步骤 6: 缓存优化
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # 步骤 7: 设置应用版本
      - name: Set Application Version
        run: |
          # 提取标签名作为版本
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=manual-${{ github.run_id }}
          fi
          
          # 更新配置文件
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
          echo "Building version: $VERSION"

      # 步骤 8: 构建应用
      - name: Build Tauri Application
        run: cargo tauri build --verbose

      # 步骤 9: 修复的产物上传 - 使用 v4 替代弃用的 v3
      - name: Upload Artifacts
        # 使用 upload-artifact v4 替代已弃用的 v3
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ github.ref_name || 'manual' }}
          path: |
            src-tauri/target/release/bundle/**
            src-tauri/target/**/*.msi
            src-tauri/target/**/*.AppImage
          retention-days: 7  # 设置自动清理时间
          if-no-files-found: error  # 如果没有文件则失败

      # 步骤 10: 添加调试信息
      - name: Show Build Results
        run: |
          echo "Build artifacts:"
          ls -R src-tauri/target/release/bundle || true
          echo "Uploaded artifacts:"
          ls -R ${{ github.workspace }} || true