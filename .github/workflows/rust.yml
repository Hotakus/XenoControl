name: Tauri Cross-Platform Build and Release

on:
  push:
    tags: ["v*"]   # 匹配 v 开头的标签，如 v0.1.8
  workflow_dispatch: # 手动触发支持

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write

    steps:
      # 步骤 1: 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ 步骤 2: 确保图标文件存在（修复 .ico 错误）
      - name: Verify Icon Files
        run: |
          # 检查图标文件是否存在
          if [ ! -f "icons/icon.ico" ]; then
            echo "::warning::icon.ico file missing. Generating placeholder icon..."
            # 创建一个简单的 .ico 文件作为占位符
            convert -size 256x256 xc:white -define icon:auto-resize=256,128,64,48,32,16 placeholder.ico
            mkdir -p icons
            mv placeholder.ico icons/icon.ico
          fi

          # 验证其他图标格式
          if [ ! -f "icons/icon.png" ]; then
            echo "::warning::icon.png file missing. Generating placeholder icon..."
            convert -size 512x512 xc:white placeholder.png
            mv placeholder.png icons/icon.png
          fi

      # 步骤 3: 安装 Rust
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src, clippy

      # 步骤 4: 安装 Tauri CLI
      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      # 步骤 5: 安装 Linux 依赖
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            librsvg2-dev \
            patchelf \
            libudev-dev \
            pkg-config \
            libayatana-appindicator3-dev \
            imagemagick  # 用于图标转换

      # 步骤 6: 安装 WiX 工具集
      - name: Install WiX Toolset for Windows
        if: matrix.platform == 'windows-latest'
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip" -OutFile "wix.zip"
          Expand-Archive -Path "wix.zip" -DestinationPath "wix"
          $wixPath = "$pwd\wix"
          echo "WIX_PATH=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # 步骤 7: 检查 Windows WebView2
      - name: Check Windows Dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $regPath = "HKLM:\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}"
          if (-not (Test-Path $regPath)) {
            Write-Host "WebView2 not found, installing..."
            $installerPath = "$env:TEMP\MicrosoftEdgeWebview2Setup.exe"
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $installerPath
            Start-Process -FilePath $installerPath -ArgumentList "/silent /install" -Wait
          } else {
            Write-Host "WebView2 is already installed"
          }

      # 步骤 8: 设置版本号
      - name: Set Application Version
        shell: bash
        run: |
          BASE_VERSION=$(grep -E '"version":' tauri.conf.json | sed -E 's/.*"version": *"([^"]+).*/\1/')
          
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="${BASE_VERSION}+manual.${{ github.run_id }}"
          fi

          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            FINAL_VERSION=$(echo "$VERSION" | sed -E 's/[-+].*//')
            FINAL_VERSION=$(echo "$FINAL_VERSION" | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*$/\1/')
            if [[ "$FINAL_VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
              FINAL_VERSION="$FINAL_VERSION.0"
            elif [[ "$FINAL_VERSION" =~ ^[0-9]+$ ]]; then
              FINAL_VERSION="$FINAL_VERSION.0.0"
            fi
            echo "📦 Windows MSI version: $FINAL_VERSION"
          else
            FINAL_VERSION=$VERSION
            echo "📦 Final version: $FINAL_VERSION"
          fi

          sed -i.bak -E "s/\"version\": *\"[^\"]+\"/\"version\": \"$FINAL_VERSION\"/" tauri.conf.json && rm tauri.conf.json.bak
          sed -i.bak -E "s/^version = \"[^\"]+\"/version = \"$FINAL_VERSION\"/" Cargo.toml && rm Cargo.toml.bak
          echo "Updated tauri.conf.json version:"
          grep '"version":' tauri.conf.json
          echo "Updated Cargo.toml version:"
          grep '^version =' Cargo.toml

      # 步骤 9: 构建 Tauri 应用
      - name: Build Tauri Application
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            cargo tauri build --verbose
          else
            cargo tauri build --verbose
          fi

      # 步骤 10: 上传构建产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ github.ref_name || 'manual' }}
          path: |
            target/release/bundle/**
            target/**/*.msi
            target/**/*.AppImage
            target/**/*.deb
          retention-days: 7
          if-no-files-found: warn

      # 步骤 11: 显示构建产物信息
      - name: Show Build Results
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            dir /s /b target\\release\\bundle || true
            dir /s /b target\\*.msi || true
          else
            find target/release/bundle -type f -print || true
            find ${{ github.workspace }} -name '*.AppImage' -o -name '*.deb' -print || true
          fi

  # Release 发布任务
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: build-*
          merge-multiple: true

      - name: Generate Changelog
        uses: TriPSs/conventional-changelog-action@v3
        id: changelog
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # version: ${{ github.ref_name }}
          output-file: "CHANGELOG.md"

      - name: Check Prerelease Status
        id: check-prerelease
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" =~ -[a-zA-Z0-9] ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ fromJson(steps.check-prerelease.outputs.prerelease) }}
          files: artifacts/**/*
          draft: false
          generate_release_notes: false

      - name: Show Release URL
        shell: bash
        run: echo "Release created at ${{ steps.create-release.outputs.url }}"