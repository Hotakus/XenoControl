name: Tauri Cross-Platform Build and Release

on:
  push:
    tags: [ "v*" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ windows-latest, ubuntu-latest ]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify Icon Paths
        shell: bash
        run: |
          echo "当前工作目录: $(pwd)"
          echo "图标文件列表:"
          ls -l icons/
          
          if [ -f "icons/icon.ico" ]; then
            echo "✅ 找到 icon.ico 文件"
          else
            echo "::error::未找到 icons/icon.ico 文件！请确保图标位于 icons/ 文件夹中"
            exit 1
          fi

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src, clippy

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            librsvg2-dev \
            patchelf \
            libudev-dev \
            pkg-config \
            libayatana-appindicator3-dev

      - name: Install WiX Toolset for Windows
        if: matrix.platform == 'windows-latest'
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip" -OutFile "wix.zip"
          Expand-Archive -Path "wix.zip" -DestinationPath "wix"
          $wixPath = "$pwd\wix"
          echo "WIX_PATH=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Check Windows Dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $regPath = "HKLM:\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}"
          if (-not (Test-Path $regPath)) {
            Write-Host "WebView2 not found, installing..."
            $installerPath = "$env:TEMP\MicrosoftEdgeWebview2Setup.exe"
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $installerPath
            Start-Process -FilePath $installerPath -ArgumentList "/silent /install" -Wait
          } else {
            Write-Host "WebView2 is already installed"
          }

      - name: Set Application Version
        shell: bash
        run: |
          BASE_VERSION=$(grep -E '"version":' tauri.conf.json | sed -E 's/.*"version": *"([^"]+).*/\1/')
          
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="${BASE_VERSION}+manual.${{ github.run_id }}"
          fi

          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            FINAL_VERSION=$(echo "$VERSION" | sed -E 's/[-+].*//')
            FINAL_VERSION=$(echo "$FINAL_VERSION" | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*$/\1/')
            if [[ "$FINAL_VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
              FINAL_VERSION="$FINAL_VERSION.0"
            elif [[ "$FINAL_VERSION" =~ ^[0-9]+$ ]]; then
              FINAL_VERSION="$FINAL_VERSION.0.0"
            fi
          else
            FINAL_VERSION=$VERSION
          fi

          sed -i.bak -E "s/\"version\": *\"[^\"]+\"/\"version\": \"$FINAL_VERSION\"/" tauri.conf.json && rm tauri.conf.json.bak
          sed -i.bak -E "s/^version = \"[^\"]+\"/version = \"$FINAL_VERSION\"/" Cargo.toml && rm Cargo.toml.bak
          echo "📦 Version: $FINAL_VERSION"

      - name: Build Tauri Application
        shell: bash
        run: |
          echo "构建前目录结构:"
          ls -l
          cargo tauri build --verbose

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ github.ref_name || 'manual' }}
          path: |
            target/release/bundle/**
            target/**/*.msi
            target/**/*.AppImage
            target/**/*.deb
          retention-days: 7
          if-no-files-found: warn

      - name: Show Build Results
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            dir /s /b target\\release\\bundle || true
            dir /s /b target\\*.msi || true
          else
            find target/release/bundle -type f -print || true
            find ${{ github.workspace }} -name '*.AppImage' -o -name '*.deb' -print || true
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Release Notes
        id: changelog
        run: |
          # 简洁的变更日志生成
          echo "changes=$(git log --pretty=format:'- %s (%h)' $(git describe --tags --abbrev=0 ${{ github.ref_name }}^)..${{ github.ref_name }})" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ### Changelog
            ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false

#      - name: Upload Release Assets
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: artifacts
#          asset_name: build-artifacts-${{ github.ref_name }}
#          asset_content_type: application/zip
      - name: Upload Release Assets
        run: |
          # 上传 artifacts 目录中的所有文件
          for file in $(find artifacts -type f); do
            echo "📤 Uploading $file"
            curl -sS \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          done

      - name: Show Release URL
        run: echo "✅ Release created at ${{ steps.create_release.outputs.html_url }}"




